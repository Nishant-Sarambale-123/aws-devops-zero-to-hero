Here are **detailed notes on AWS CodeDeploy**, covering all concepts, architecture, deployment types, integrations, best practices, interview questions, and official documentation links.

---

## üß† What is AWS CodeDeploy?

**AWS CodeDeploy** is a **fully managed deployment service** that automates software deployments to:

* Amazon EC2 instances
* AWS Lambda functions
* On-premises servers
* Amazon ECS (via blue/green deployments)

> üéØ It helps you deploy application updates **reliably, rapidly, and with minimal downtime**.

---

## ‚úÖ Key Features

| Feature                           | Description                                               |
| --------------------------------- | --------------------------------------------------------- |
| Automated deployments             | No manual copying or restarts                             |
| Blue/green & in-place deployments | Minimize downtime                                         |
| Rollback support                  | Automatically or manually rollback if failure             |
| Hooks & lifecycle events          | Run custom scripts at each stage                          |
| Monitoring                        | Integrates with CloudWatch, CloudTrail, SNS               |
| On-premises support               | Works beyond AWS cloud                                    |
| Deployment groups & targets       | Flexible targeting for deployments                        |
| Integration                       | Works with CodePipeline, GitHub, Bitbucket, Jenkins, etc. |

---

## üß± Core Components

| Component            | Description                                                               |
| -------------------- | ------------------------------------------------------------------------- |
| **Application**      | Logical unit for deployment (e.g., WebApp, LambdaFunction)                |
| **Deployment Group** | Group of EC2 instances, Lambda aliases, or ECS services to deploy to      |
| **Deployment**       | The actual process of deploying a revision                                |
| **Revision**         | Source content to deploy (e.g., .zip or .tar from S3 or GitHub)           |
| **AppSpec file**     | Tells CodeDeploy what to do during deployment (YAML/JSON)                 |
| **Hooks**            | Lifecycle events where custom scripts can run                             |
| **Agent**            | CodeDeploy agent installed on EC2/on-prem servers (not needed for Lambda) |

---

## üì¶ Supported Deployment Targets

| Target Type | Deployment Mode                         |
| ----------- | --------------------------------------- |
| EC2/on-prem | In-place or Blue/Green                  |
| Lambda      | Linear, Canary, All-at-once             |
| ECS         | Blue/Green via ECS listener replacement |

---

## üîÅ Deployment Types

### 1. **In-Place Deployment** (EC2/on-prem only)

* App is stopped ‚Üí updated ‚Üí restarted on **same instance**.
* Requires CodeDeploy agent.

### 2. **Blue/Green Deployment** (EC2, ECS, Lambda)

* Deploys app to **new set of instances** or container tasks.
* Swaps traffic from old to new after validation.
* Supports easy rollback.

---

## üßæ AppSpec File (for EC2/on-prem)

Example `appspec.yml`:

```yaml
version: 0.0
os: linux
files:
  - source: /
    destination: /home/ec2-user/app
hooks:
  BeforeInstall:
    - location: scripts/before_install.sh
      timeout: 180
      runas: ec2-user
  AfterInstall:
    - location: scripts/after_install.sh
  ApplicationStart:
    - location: scripts/start_server.sh
  ValidateService:
    - location: scripts/validate.sh
```

---

## üîÑ AppSpec File (for Lambda)

```yaml
version: 0.0
Resources:
  - myLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Name: MyFunction
        Alias: live
Hooks:
  BeforeAllowTraffic:
    - location: validate.sh
  AfterAllowTraffic:
    - location: notify.sh
```

---

## üîß Integration with CodePipeline

Typical flow:

```
Source (GitHub/S3/CodeCommit)
     ‚Üì
Build (CodeBuild)
     ‚Üì
Deploy (CodeDeploy)
```

CodePipeline handles orchestration, CodeDeploy handles the actual deployment to EC2/Lambda/ECS.

---

## üõ°Ô∏è Security and IAM

You need to create:

1. **Service Role** for CodeDeploy to access EC2, ECS, Lambda, etc.
2. **Instance Profile** for EC2 instances (to allow agent communication)

IAM Policy Example for EC2 instance profile:

```json
{
  "Version": "2012-10-17",
  "Statement": [{
    "Effect": "Allow",
    "Action": [
      "codedeploy:*",
      "s3:Get*",
      "s3:List*"
    ],
    "Resource": "*"
  }]
}
```

---

## üìä Monitoring and Logging

* **CloudWatch Logs**: Deployment logs and hook scripts
* **CloudTrail**: API call logging
* **SNS**: Notifications for deployment success/failure
* **Deployment status**: Can be viewed in CodeDeploy console or CLI

---

## üß∞ AWS CLI Commands

| Task                         | Command                                                        |
| ---------------------------- | -------------------------------------------------------------- |
| List applications            | `aws deploy list-applications`                                 |
| Create deployment            | `aws deploy create-deployment --application-name ...`          |
| Get deployment status        | `aws deploy get-deployment --deployment-id ...`                |
| List deployment groups       | `aws deploy list-deployment-groups --application-name ...`     |
| Register on-prem server      | `aws deploy register-on-premises-instance --instance-name ...` |
| Push revision from GitHub/S3 | `aws deploy push` (used with CodeDeploy agent or scripts)      |

---

## üí° Best Practices

* Use **Blue/Green** deployments for zero-downtime updates.
* Enable **automatic rollback** on failure.
* Separate deployment logic using **hooks**.
* Monitor deployments using CloudWatch and SNS.
* Keep **AppSpec** files versioned with your app source code.
* Use **CodePipeline** for end-to-end automation.

---

## üß† Interview Questions & Answers

### 1. ‚ùì What is AWS CodeDeploy?

**Answer**: A fully managed deployment service that automates software deployment to EC2, ECS, Lambda, and on-prem servers.

---

### 2. ‚ùì What‚Äôs the difference between in-place and blue/green deployment?

**Answer**:

* **In-place**: Deploys to existing instances.
* **Blue/Green**: Deploys to new instances and switches traffic.

---

### 3. ‚ùì What is the purpose of the AppSpec file?

**Answer**: It defines deployment instructions (e.g., where to copy files, what hooks to run) in YAML or JSON format.

---

### 4. ‚ùì How do lifecycle hooks work in CodeDeploy?

**Answer**: Lifecycle hooks define stages (e.g., `BeforeInstall`, `AfterInstall`, etc.) where custom scripts can run during the deployment process.

---

### 5. ‚ùì Can CodeDeploy work with on-prem servers?

**Answer**: Yes. You can register on-prem servers as targets using the CodeDeploy agent.

---

## üìö Official Documentation & Resources

* üîó [CodeDeploy Homepage](https://aws.amazon.com/codedeploy/)
* üìò [CodeDeploy User Guide](https://docs.aws.amazon.com/codedeploy/latest/userguide/)
* üßæ [AppSpec Reference (EC2/on-prem)](https://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html)
* üìÑ [AppSpec Reference (Lambda)](https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-lambda.html)
* üß∞ [CLI Reference](https://docs.aws.amazon.com/cli/latest/reference/deploy/index.html)
* üì¶ [Pricing](https://aws.amazon.com/codedeploy/pricing/)

---

Would you like:

* A sample EC2 deployment project with AppSpec?
* A Lambda blue/green deployment example?
* CloudFormation template for CodeDeploy?

Let me know and I‚Äôll generate it for you.
